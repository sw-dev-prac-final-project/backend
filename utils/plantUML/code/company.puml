@startuml company
actor User
actor Admin
participant "Frontend" as FE
participant "<<router>>\n companies" as Router
participant "<<middleware>>\nAuth" as Auth
participant "<<controllers>>\n Company" as Controller
participant "<<models>>\nCompany" as CompanyModel
participant "<<MongoDB>>\nCompanies" as CompaniesDB

group getCompanies
User -> FE : Visit company list page
FE -> Router : GET /api/v1/companies
Router -> Auth : validate JWT + authorize
Auth --> Router : req.user
Router -> Controller : getCompanies(req)
Controller -> CompanyModel : find()
CompanyModel -> CompaniesDB : Query companies
CompaniesDB --> CompanyModel : companies
CompanyModel --> Controller : companies
Controller --> Router : res.json(companies)
Router --> FE : show list
end

== ==

group getCompany
User -> FE : View company detail
FE -> Router : GET /api/v1/companies/:id
Router -> Auth : validate JWT + authorize
Auth --> Router : req.user
Router -> Controller : getCompany(req)
Controller -> CompanyModel : findById(req.params.id)
CompanyModel -> CompaniesDB : Query company by ID
CompaniesDB --> CompanyModel : company
CompanyModel --> Controller : company
Controller --> Router : res.json(company)
Router --> FE : show company detail
end

== ==

group addCompany
Admin -> FE : Fill add company form
FE -> Router : POST /api/v1/companies
Router -> Auth : validate JWT + authorize("admin")
Auth --> Router : req.user (admin)
Router -> Controller : addCompany(req)
Controller -> CompanyModel : create(req.body)
CompanyModel -> CompaniesDB : Insert new company
CompaniesDB --> CompanyModel : new company
CompanyModel --> Controller : new company
Controller --> Router : res.status(201).json(company)
Router --> FE : show success
end

== ==

group updateCompany
Admin -> FE : Edit company
FE -> Router : PUT /api/v1/companies/:id
Router -> Auth : validate JWT + authorize("admin")
Auth --> Router : req.user (admin)
Router -> Controller : updateCompany(req)
Controller -> CompanyModel : findByIdAndUpdate(id, body)
CompanyModel -> CompaniesDB : Update company by ID
CompaniesDB --> CompanyModel : updated company
CompanyModel --> Controller : updated company
Controller --> Router : res.json(company)
Router --> FE : show update result
end

== ==

group deleteCompany
Admin -> FE : Delete company
FE -> Router : DELETE /api/v1/companies/:id
Router -> Auth : validate JWT + authorize("admin")
Auth --> Router : req.user (admin)
Router -> Controller : deleteCompany(req)
Controller -> CompanyModel : findByIdAndDelete(req.params.id)
CompanyModel -> CompaniesDB : Delete company by ID
CompaniesDB --> CompanyModel : deleted
CompanyModel --> Controller : deleted
Controller --> Router : res.json(success)
Router --> FE : show result
end

== ==

group getCompanyTimeSlots
User -> FE : View time slots for company
FE -> Router : GET /api/v1/companies/:id/timeslots
Router -> Auth : validate JWT + authorize
Auth --> Router : req.user
Router -> Controller : getCompanyTimeSlots(req)
Controller -> CompanyModel : findById(req.params.id)
CompanyModel -> CompaniesDB : Query company by ID
CompaniesDB --> CompanyModel : company
CompanyModel --> Controller : company
Controller -> CompanyModel : extract available time slots
Controller --> Router : res.json(slots)
Router --> FE : show available time slots
end

@startuml booking
actor User
participant "Frontend" as FE
participant "<<router>>\n bookings" as Router
participant "<<middleware>>\nAuth" as Auth
participant "<<controllers>>\n Booking" as Controller
participant "<<models>>\nBooking" as Booking
participant "<<models>>\nCompany" as Company
participant "<<utils>>\nEmail" as Email
participant "<<mongoDB>>\nBooking" as MongoDB_Booking
participant "<<mongoDB>>\nCompany" as MongoDB_Company

group getBookings
User -> FE : Visit bookings page
FE -> Router : GET /api/v1/bookings
Router -> Auth : validate JWT
Auth --> Router : req.user
Router -> Controller : getBookings(req)
alt user is not admin
  Controller -> Booking : find({ user: req.user.id }).populate(company)
else user is admin
  alt req.params.companyID exists
    Controller -> Booking : find({ company: id }).populate(company)
  else no filter
    Controller -> Booking : find().populate(company)
  end
end
Booking -> MongoDB_Booking : Query bookings
MongoDB_Booking --> Booking : bookings
Booking --> Controller : bookings
Controller --> Router : res.json(bookings)
Router --> FE : show bookings
end

== ==

group addBooking
User -> FE : Fill booking form
FE -> Router : POST /api/v1/bookings
Router -> Auth : validate JWT
Router -> Controller : addBooking(req)

Controller -> Company : findById(companyID)
Company -> MongoDB_Company : Query company by ID
MongoDB_Company --> Company : company doc
alt slot already booked or invalid date/slot
  Controller --> Router : res.status(400).json(error)
else check user booking limit
  Controller -> Booking : find({ user: id })
  Booking -> MongoDB_Booking : query by user ID
  MongoDB_Booking --> Booking : bookings[]
  alt exceeded
    Controller --> Router : res.status(400).json(error)
  else create booking
    Controller -> Booking : create({...})
    Booking -> MongoDB_Booking : insert new booking
    MongoDB_Booking --> Booking : success
    Booking --> Controller : booking

    Controller -> Company : update bookedSlots
    Company -> MongoDB_Company : push slot to bookedSlots[]
    MongoDB_Company --> Company : updated

    Controller -> Email : sendConfirmationEmail()
    Email --> Controller : sent
    Controller --> Router : res.status(201).json(booking)
  end
end
Router --> FE : show result
end

== ==

group updateBooking
User -> FE : Update booking info
FE -> Router : PUT /api/v1/bookings/:id
Router -> Auth : validate JWT
Router -> Controller : updateBooking(req)
Controller -> Booking : findById(id)
Booking -> MongoDB_Booking : query
MongoDB_Booking --> Booking : existing booking
alt not owner and not admin
  Controller --> Router : res.status(401)
else continue
  Controller -> Company : findById(oldCompany)
  Controller -> Company : findById(newCompany)
  Controller -> Company : check isSlotBooked()
  alt slot not available
    Controller --> Router : 400 error
  else
    Controller -> Company : remove old slot from oldCompany.bookedSlots
    Controller -> Company : add new slot to newCompany.bookedSlots
    Controller -> Booking : findByIdAndUpdate(...)
    Booking -> MongoDB_Booking : update booking
    MongoDB_Booking --> Booking : updated
    Controller --> Router : res.json(updated)
  end
end
Router --> FE : show result
end

== ==

group getAvailableTimeSlots
User -> FE : Select company + date
FE -> Router : GET /api/v1/bookings/available-slots
Router -> Auth : validate JWT
Router -> Controller : getAvailableTimeSlots(req)

Controller -> Company : findById(companyId)
Company -> MongoDB_Company : query
MongoDB_Company --> Company : company
Controller -> Company : getAvailableTimeSlots()
Controller -> Company : filter out bookedSlots by date
Controller --> Router : res.json(availableSlots)
Router --> FE : show slot availability
end
@enduml
